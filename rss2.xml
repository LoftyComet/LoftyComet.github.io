<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>星茗轩</title>
    <link>https://sunnysugar.fun/</link>
    
    <atom:link href="https://sunnysugar.fun/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>凡是过往，皆为序章。</description>
    <pubDate>Sat, 28 Nov 2020 05:53:50 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>数据结构实验之图的操作</title>
      <link>https://sunnysugar.fun/2020/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%95%E9%AA%8C%E4%B8%89/</link>
      <guid>https://sunnysugar.fun/2020/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%95%E9%AA%8C%E4%B8%89/</guid>
      <pubDate>Fri, 27 Nov 2020 15:48:22 GMT</pubDate>
      
      <description>&lt;p&gt;这波啊，这波是造福后来人。只要他找得到。&lt;br&gt;依旧是刻骨铭心的c++，头昏眼花的各种算法，gtmd数据结构。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>这波啊，这波是造福后来人。只要他找得到。<br>依旧是刻骨铭心的c++，头昏眼花的各种算法，gtmd数据结构。</p><a id="more"></a><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ol><li><p>掌握图的基本概念，描述方法；遍历方法。</p></li><li><p>掌握图的最短路径和最小生成树算法。</p><h2 id="试验项目内容"><a href="#试验项目内容" class="headerlink" title="试验项目内容"></a>试验项目内容</h2></li><li><p>图的存储结构使用邻接矩阵。</p></li><li><p>创建图操作类，支持BFS遍历、DFS遍历、求单源最短路径、求最小生成树、判断是否存在回路等五个功能，这些功能封装成图操作类的成员函数。</p></li><li><p>输入图的节点数n（不超过10个）、边数m，节点分别用0到n-1表示。</p></li><li><p>采用“起始节点，终止节点，权值”输入图的m条边，创建图。</p></li><li><p>输出从节点0开始的BFS遍历、DFS遍历节点遍历顺序。</p></li><li><p>输出从节点0到其余节点的最短路径及最短路径长度，如果没有路经，输出0。</p></li><li><p>输出图的最小生成树包含的边，边用“起始节点，终止节点，权值”表示。</p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>先抄上书上代码，完成图的基础操作实现。<br>书上本来有代码注释，但是我在抄的时候没有打上去，将就着看吧（手动狗头）。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p> class Graph {<br> private:</p><pre><code> void operator =(const Graph&amp;) &#123;&#125; Graph(const Graph&amp;)&#123;&#125;</code></pre><p> public:</p><pre><code> Graph()&#123;&#125; virtual ~Graph()&#123;&#125; virtual void Init(int n) =0; virtual int n() = 0; virtual int e() = 0; virtual int first(int v)=0; virtual int next(int v,int w)=0; virtual void setEdge(int v1,int v2,int wght)=0; virtual void delEdge(int v1,int v2) =0; virtual bool isEdge(int i,int j)=0; virtual int weight(int v1,int v2)=0; virtual int getMark(int v) =0; virtual void setMark(int v,int val) =0;</code></pre><p> };</p></li></ol><h3 id="图的邻接矩阵实现"><a href="#图的邻接矩阵实现" class="headerlink" title="图的邻接矩阵实现"></a>图的邻接矩阵实现</h3><pre><code>class Graphm: public Graph&#123;private:    int numVertex, numEdge;    int **matrix;    int *mark;public:    Graphm(int numVert)&#123;        Init(numVert);    &#125;    ~Graphm()&#123;        delete [] mark;        for (int i=1;i&lt;numVertex+1;i++)&#123;            delete [] matrix[i];        &#125;        delete [] matrix;    &#125;    void Init(int n)&#123;        int i;        numVertex = n;        numEdge = 0;        mark = new int[n+1];        for (i=1;i&lt;numVertex+1;i++)&#123;            mark[i] = UNVISITED;        &#125;        matrix = (int**) new int* [numVertex+1];        for (i=1;i&lt;numVertex+1;i++)            matrix[i] = new int[numVertex+1];        for (i=1;i&lt;numVertex+1;i++)            for (int j=1;j&lt;numVertex+1;j++)                matrix[i][j]= 0;            &#125;    void Remark(int n)&#123;        int i;        numVertex = n;        for (i=1;i&lt;numVertex+1;i++)&#123;            mark[i] = UNVISITED;        &#125;    &#125;    int n()&#123;        return numVertex;&#125;    int e()&#123;        return numEdge;    &#125;    int first (int v)&#123;        for (int i=1;i&lt;numVertex+1;i++)            if (matrix[v][i]!=0)                return i;        return numVertex+1;    &#125;    int next(int v, int w)&#123;        for (int i=w+1;i&lt;numVertex+1;i++)&#123;            if (matrix[v][i]!=0)                return i;        &#125;        return numVertex+1;    &#125;    void setEdge(int v1,int v2,int wt)&#123;        if (matrix[v1][v2]==0)            numEdge++;        matrix[v1][v2] = wt;        matrix[v2][v1] = wt;//双向图    &#125;    void delEdge(int v1,int v2)&#123;        if (matrix[v1][v2]!=0)            numEdge--;        matrix[v1][v2] = 0;    &#125;    bool isEdge(int i, int j) &#123;        return matrix[i][j]!=0;    &#125;    int weight(int v1,int v2)&#123;        return matrix[v1][v2];    &#125;    int getMark(int v) &#123;        return mark[v];    &#125;    void setMark(int v, int val) &#123;        mark[v] = val;    &#125;&#125;;</code></pre><hr><h3 id="DFS-and-BFS"><a href="#DFS-and-BFS" class="headerlink" title="DFS and BFS"></a>DFS and BFS</h3><blockquote><p>根据实验要求，我创建了Graphhelp类，里面包含了所需的主要五种函数。</p></blockquote><p>在弄清了DFS与BFS的原理之后，我着手写好代码，却发现DFS时总有两个节点的顺序与结果不同。经过刻骨铭心的Debug，结果发现节点是从1开始，而书上的代码储存路径的数组是从0开始。于是将每个0加一，在进行相应的逻辑修正，终究解决了输出顺序的问题。另外在实验过程中发现同一个图需要使用多次，于是写了Remark来重置图的标记矩阵。 </p><pre><code>void DFS(Graphm* G,int v)&#123;    time1++;    G-&gt;setMark(v,VISITED);    if (time1&lt;G-&gt;n())        cout &lt;&lt; v &lt;&lt; &quot; &quot;;    else &#123;        cout &lt;&lt; v;    &#125;    for (int w=G-&gt;first(v);w&lt;G-&gt;n()+1;w = G-&gt;next(v,w))&#123;        if (G-&gt;getMark(w)==UNVISITED)            DFS(G,w);    &#125;&#125;void BFS(Graphm* G,int start,queue&lt;int&gt;* Q)&#123;    int v,w;    Q-&gt;push(start);    G-&gt;setMark(start,VISITED);    while (Q-&gt;size() != 0) &#123;        v = Q-&gt;front();        Q-&gt;pop();        time2++;        if (time2&lt;G-&gt;n())            cout &lt;&lt; v &lt;&lt; &quot; &quot;;        else &#123;            cout &lt;&lt; v;        &#125;        for (w=G-&gt;first(v);w&lt;G-&gt;n()+1;w = G-&gt;next(v,w))            if (G-&gt;getMark(w) == UNVISITED)&#123;                G-&gt;setMark(w,VISITED);                Q-&gt;push(w);            &#125;    &#125;&#125;void Remark(int n)&#123;    int i;    numVertex = n;    for (i=1;i&lt;numVertex+1;i++)&#123;        mark[i] = UNVISITED;    &#125;&#125;</code></pre><h3 id="单源最短路径"><a href="#单源最短路径" class="headerlink" title="单源最短路径"></a>单源最短路径</h3><p>Dijkstra算法，书上代码大概的逻辑已然实现，我只需改进让其输出路径即可。注意调用该函数是是传入&amp;G即G的地址，并且我拓展一个参数及数组way用来储存路径。本来每个路径我打算用链表结果发现很复杂，于是灵机一动决定使用字符串。只要在更新D数组的时候同时更新way路径数组即可</p><p>但是当我写好发现运行不了。再仔细看了好久书，发现书上是有向图而该题是无向图。当时心里那个绝望啊…</p><pre><code>void Dijkstra(Graphm* G,int* D,int s,string* Way)&#123;    int i,v,w;    for (int i=1;i&lt;G-&gt;n()+1;i++)&#123;        D[i] = 999999;        Way[i] = to_string(s);    &#125;    D[1]=0;    for (i=1;i&lt;G-&gt;n()+1;i++)&#123;        v = minVertex(G,D);        if (D[v] == 999999) return;        G-&gt;setMark(v,VISITED);        for (w=G-&gt;first(v);w&lt;G-&gt;n()+1;w = G-&gt;next(v,w))&#123;            if (D[w] &gt; (D[v]+G-&gt;weight(v,w)))&#123;                D[w] = D[v] + G-&gt;weight(v,w);                if (Way[w]!=to_string(v))                    Way[w] = Way[v] + to_string(v);            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>输出最小生成树，我选用Prime算法（看起来比较简单）。理解书上代码的思路，我只需要写好AddEdgetoMST函数即可。由于要按照权值从小到大输出边，所以我打算用三个数组分别储存起点终点和权值。我起初是在Graphhelp类中定义了三个属性，可是始终无法将值储存进去。（段错误？？？）于是干脆给Prim算法多几个参数，直接传入三个数组指针。</p><p>在排序时，是先按照权值，然后再分别按照起点，同时保证起点小于等于终点，我选用冒泡排序（虽然相对较慢但是毕竟简单）</p><pre><code>void Prim(Graphm* G,int* D,int s,int* v1,int* v2,int* weight)&#123;    int V[G-&gt;n()+1];    int i,w;    for (i=1;i&lt;G-&gt;n()+1;i++)&#123;        D[i] = 999999;    &#125;    D[1] = 0;    for (i=1;i&lt;G-&gt;n()+1;i++)&#123;        int v = minVertex(G,D);        G-&gt;setMark(v,VISITED);        if (v != s)&#123;            AddEdgetoMST(V[v],v,G,v1,v2,weight);        &#125;        if (D[v]==999999)return;        for (w=G-&gt;first(v);w&lt;G-&gt;n()+1;w = G-&gt;next(v,w))            if (D[w]&gt;G-&gt;weight(v,w))&#123;                D[w] = G-&gt;weight(v,w);                V[w]=v;        &#125;    &#125;&#125;void AddEdgetoMST(int v1,int v2,Graphm* G,int* PrimresultV1,int* PrimresultWeight,int* PrimresultV2)&#123;    if (v1&lt;v2)&#123;//确保起点比终点小        PrimresultV1[num]=v1;        PrimresultV2[num]=v2;    &#125;    else &#123;        PrimresultV1[num]=v2;        PrimresultV2[num]=v1;    &#125;    PrimresultWeight[num]=G-&gt;weight(v1,v2);    num++;&#125;void PrintPrimResult(int* PrimresultV1,int* PrimresultWeight,int* PrimresultV2)&#123;    for (int i=0;i&lt;num-1;i++)&#123;        for (int m=num-1;m&gt;i;m--)&#123;            if (PrimresultWeight[i]&gt;PrimresultWeight[m])&#123;//先按照权值排序                int temp1 = PrimresultWeight[i];                PrimresultWeight[i] = PrimresultWeight[m];                PrimresultWeight[m] = temp1;                int temp2 = PrimresultV1[i];                PrimresultV1[i] = PrimresultV1[m];                PrimresultV1[m] = temp2;                int temp3 = PrimresultV2[i];                PrimresultV2[i] = PrimresultV2[m];                PrimresultV2[m] = temp3;            &#125;            if (PrimresultWeight[i]==PrimresultWeight[m])&#123;//若相等，则按照起点大小排序                if (PrimresultV1[i]&gt;PrimresultV1[m])&#123;                    int temp1 = PrimresultWeight[i];                    PrimresultWeight[i] = PrimresultWeight[m];                    PrimresultWeight[m] = temp1;                    int temp2 = PrimresultV1[i];                    PrimresultV1[i] = PrimresultV1[m];                    PrimresultV1[m] = temp2;                    int temp3 = PrimresultV2[i];                    PrimresultV2[i] = PrimresultV2[m];                    PrimresultV2[m] = temp3;                &#125;            &#125;        &#125;    &#125;    for (int i=0;i&lt;num;i++)&#123;        cout &lt;&lt; PrimresultV1[i] &lt;&lt; &quot; &quot; &lt;&lt; PrimresultV2[i] &lt;&lt; &quot; &quot; &lt;&lt; PrimresultWeight[i] &lt;&lt; endl;    &#125;&#125;</code></pre><h3 id="是否有回路"><a href="#是否有回路" class="headerlink" title="是否有回路"></a>是否有回路</h3><p>判断是否有回路，我按照前几种的思路，一个一个点标记，不断扩大连通分支，而每次加入一个点时，遍历已加入的点，若新的边数大于等于二，则显然有回路。</p><p>实验报告里不敢写，目测该函数有bug，毕竟测试样例太少。建议自行谷歌。</p><pre><code>bool HaveCircuit(Graphm* G)&#123;    int n=0;    int num = 0;    for (int k=0;k&lt;G-&gt;n();k++)&#123;        while (!G-&gt;isEdge(k,n)) &#123;            n++;        &#125;        for (int w=n;w&lt;G-&gt;n();w++)&#123;//遍历未容纳点            for (int i=0;i&lt;n;i++)&#123;//已经容纳的点                if (G-&gt;isEdge(i,w))//一旦是边，加1                    num++;                if (num&gt;=2)//有回路                    return false;            &#125;            num = 0;        &#125;    &#125;    return true;&#125;</code></pre><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>对于数据结构我是真的服气，这破玩意逻辑思路简单，但是要用c++代码来实现简直就像在刀尖上找跳蚤（奇怪的比喻）。但是当最后终于做完后，一声仰天长叹的感觉，”一蓑烟雨任平生”。</p>]]></content:encoded>
      
      
      <category domain="https://sunnysugar.fun/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/">计算机</category>
      
      <category domain="https://sunnysugar.fun/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/">数据结构实验</category>
      
      
      <category domain="https://sunnysugar.fun/tags/C/">C++</category>
      
      
      <comments>https://sunnysugar.fun/2020/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%95%E9%AA%8C%E4%B8%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HelloWorld</title>
      <link>https://sunnysugar.fun/2020/11/24/myfirstblog/</link>
      <guid>https://sunnysugar.fun/2020/11/24/myfirstblog/</guid>
      <pubDate>Tue, 24 Nov 2020 09:57:20 GMT</pubDate>
      
      <description>&lt;p&gt;暂时没什么好写的就用一些歌词来试试吧,体验一下Markdown的感觉&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>暂时没什么好写的就用一些歌词来试试吧,体验一下Markdown的感觉</p><a id="more"></a><hr><h1 id="Viva-La-Vida"><a href="#Viva-La-Vida" class="headerlink" title="Viva La Vida"></a>Viva La Vida</h1><pre><code>                                                          by  Coldplay</code></pre><h2 id="I-used-to-rule-the-world"><a href="#I-used-to-rule-the-world" class="headerlink" title="I used to rule the world"></a>I used to rule the world</h2><blockquote><p>大千世界曾由我主宰</p></blockquote><h2 id="Seas-would-rise-when-I-gave-the-word"><a href="#Seas-would-rise-when-I-gave-the-word" class="headerlink" title="Seas would rise when I gave the word"></a>Seas would rise when I gave the word</h2><blockquote><p>巨浪也曾因我之命澎湃</p></blockquote><h2 id="Now-in-the-morning-I-sleep-alone"><a href="#Now-in-the-morning-I-sleep-alone" class="headerlink" title="Now in the morning I sleep alone"></a>Now in the morning I sleep alone</h2><blockquote><p>而今我却在黎明独自入眠</p></blockquote><h2 id="Sweep-the-streets-I-used-to-own"><a href="#Sweep-the-streets-I-used-to-own" class="headerlink" title="Sweep the streets I used to own"></a>Sweep the streets I used to own</h2><blockquote><p>在曾属于我的大道落寞徘徊</p></blockquote><h2 id="I-used-to-roll-the-dice"><a href="#I-used-to-roll-the-dice" class="headerlink" title="I used to roll the dice"></a>I used to roll the dice</h2><blockquote><p>凡人生死曾由我主宰</p></blockquote><h2 id="Feel-the-fear-in-my-enemy’s-eyes"><a href="#Feel-the-fear-in-my-enemy’s-eyes" class="headerlink" title="Feel the fear in my enemy’s eyes"></a>Feel the fear in my enemy’s eyes</h2><blockquote><p>尽情品味惊恐在死敌瞳孔绽开</p></blockquote><h2 id="Listen-as-the-crowd-would-sing"><a href="#Listen-as-the-crowd-would-sing" class="headerlink" title="Listen as the crowd would sing"></a>Listen as the crowd would sing</h2><blockquote><p>欣然倾听百姓高歌喝彩</p></blockquote><h2 id="Now-the-old-king-is-dead"><a href="#Now-the-old-king-is-dead" class="headerlink" title="Now the old king is dead"></a>Now the old king is dead</h2><blockquote><p>先王亡矣</p></blockquote><h2 id="Long-live-the-king"><a href="#Long-live-the-king" class="headerlink" title="Long live the king"></a>Long live the king</h2><blockquote><p>新王万代</p></blockquote><h2 id="One-minute-I-held-the-key"><a href="#One-minute-I-held-the-key" class="headerlink" title="One minute I held the key"></a>One minute I held the key</h2><blockquote><p>此刻我手握权位经脉</p></blockquote><h2 id="Next-the-walls-were-closed-on-me"><a href="#Next-the-walls-were-closed-on-me" class="headerlink" title="Next the walls were closed on me"></a>Next the walls were closed on me</h2><blockquote><p>转瞬才知宫墙深似海</p></blockquote><h2 id="And-I-discovered-that-my-castles-stand"><a href="#And-I-discovered-that-my-castles-stand" class="headerlink" title="And I discovered that my castles stand"></a>And I discovered that my castles stand</h2><blockquote><p>恍然发现我的城池</p></blockquote><h2 id="Upon-pillars-of-salt-and-pillars-of-sand"><a href="#Upon-pillars-of-salt-and-pillars-of-sand" class="headerlink" title="Upon pillars of salt and pillars of sand"></a>Upon pillars of salt and pillars of sand</h2><blockquote><p>基底散如盐沙乱似尘埃</p></blockquote><h2 id="I-hear-Jerusalem-bells-are-ringing"><a href="#I-hear-Jerusalem-bells-are-ringing" class="headerlink" title="I hear Jerusalem bells are ringing"></a>I hear Jerusalem bells are ringing</h2><blockquote><p>听那耶路撒冷钟声传来</p></blockquote><h2 id="Roman-Cavalry-choirs-are-singing"><a href="#Roman-Cavalry-choirs-are-singing" class="headerlink" title="Roman Cavalry choirs are singing"></a>Roman Cavalry choirs are singing</h2><blockquote><p>罗马骑兵歌声震彻山海</p></blockquote><h2 id="Be-my-mirror-my-sword-and-shield"><a href="#Be-my-mirror-my-sword-and-shield" class="headerlink" title="Be my mirror my sword and shield"></a>Be my mirror my sword and shield</h2><blockquote><p>担当我的明镜利剑和盾牌</p></blockquote><h2 id="My-missionaries-in-a-foreign-field"><a href="#My-missionaries-in-a-foreign-field" class="headerlink" title="My missionaries in a foreign field"></a>My missionaries in a foreign field</h2><blockquote><p>我的传教士屹立边疆之外</p></blockquote><h2 id="For-some-reason-I-can’t-explain"><a href="#For-some-reason-I-can’t-explain" class="headerlink" title="For some reason I can’t explain"></a>For some reason I can’t explain</h2><blockquote><p>只因一些缘由我无法释怀</p></blockquote><h2 id="Once-you-go-there-was-never"><a href="#Once-you-go-there-was-never" class="headerlink" title="Once you go there was never"></a>Once you go there was never</h2><blockquote><p>一旦你离开这里便不再</p></blockquote><h2 id="Never-an-honest-word"><a href="#Never-an-honest-word" class="headerlink" title="Never an honest word"></a>Never an honest word</h2><blockquote><p>不再有逆耳忠言存在</p></blockquote><h2 id="But-that-was-when-I-ruled-the-world"><a href="#But-that-was-when-I-ruled-the-world" class="headerlink" title="But that was when I ruled the world"></a>But that was when I ruled the world</h2><blockquote><p>而这便是我统治的时代</p></blockquote><h2 id="It-was-the-wicked-and-wild-wind"><a href="#It-was-the-wicked-and-wild-wind" class="headerlink" title="It was the wicked and wild wind"></a>It was the wicked and wild wind</h2><blockquote><p>凜冽邪风呼啸袭来</p></blockquote><h2 id="Blew-down-the-doors-to-let-me-in"><a href="#Blew-down-the-doors-to-let-me-in" class="headerlink" title="Blew down the doors to let me in"></a>Blew down the doors to let me in</h2><blockquote><p>吹散重门使我深陷阴霾</p></blockquote><h2 id="Shattered-windows-and-the-sound-of-drums"><a href="#Shattered-windows-and-the-sound-of-drums" class="headerlink" title="Shattered windows and the sound of drums"></a>Shattered windows and the sound of drums</h2><blockquote><p>断壁残垣礼崩乐坏</p></blockquote><h2 id="People-couldn’t-believe-what-I’d-become"><a href="#People-couldn’t-believe-what-I’d-become" class="headerlink" title="People couldn’t believe what I’d become"></a>People couldn’t believe what I’d become</h2><blockquote><p>世人不敢相信我已当年不再</p></blockquote><h2 id="Revolutionaries-wait"><a href="#Revolutionaries-wait" class="headerlink" title="Revolutionaries wait"></a>Revolutionaries wait</h2><blockquote><p>起义大军翘首期待</p></blockquote><h2 id="For-my-head-on-a-silver-plate"><a href="#For-my-head-on-a-silver-plate" class="headerlink" title="For my head on a silver plate"></a>For my head on a silver plate</h2><blockquote><p>有朝一日我站上断头台</p></blockquote><h2 id="Just-a-puppet-on-a-lonely-string"><a href="#Just-a-puppet-on-a-lonely-string" class="headerlink" title="Just a puppet on a lonely string"></a>Just a puppet on a lonely string</h2><blockquote><p>恰如傀儡随吊线寂寞摇摆</p></blockquote><h2 id="Oh-who-would-ever-want-to-be-king"><a href="#Oh-who-would-ever-want-to-be-king" class="headerlink" title="Oh who would ever want to be king"></a>Oh who would ever want to be king</h2><blockquote><p>悲哉谁又曾渴望万人膜拜?</p></blockquote>]]></content:encoded>
      
      
      
      
      <comments>https://sunnysugar.fun/2020/11/24/myfirstblog/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JAVA实验之GUI文件管理系统</title>
      <link>https://sunnysugar.fun/2020/11/24/java%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/</link>
      <guid>https://sunnysugar.fun/2020/11/24/java%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/</guid>
      <pubDate>Tue, 24 Nov 2020 09:57:20 GMT</pubDate>
      
      <description>&lt;p&gt;鸽了这么多天，今天终于想起来把java实验再来梳理一下（先写个简单的练练手）&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>鸽了这么多天，今天终于想起来把java实验再来梳理一下（先写个简单的练练手）</p><a id="more"></a><h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><p>利用Java输入输出系统、GUI程序设计等知识，实现文本编辑器的设计与实现。提升运用面向对象程序设计思想解决实际问题的能力。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>硬件：PC 机<br>软件：JAVA Eclipse</p><h2 id="实验具体要求"><a href="#实验具体要求" class="headerlink" title="实验具体要求"></a>实验具体要求</h2><p>实现文本编辑的各项所需功能。主要功能包含以下内容：</p><ul><li>实现文件的新建、保存等基本功能。</li><li>可以打开已保存的文件，读取文件的，实现查看，编辑等操作。</li><li>显示、编辑修改文本信息等主要处理功能。可对相关信息进行复制，剪切，粘贴等操作。</li><li>其他扩展功能可自由发挥。<h2 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h2><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3>打开记事本，其实主要构图就是上方的菜单栏，下方就是一个多行的文本输入框，GUI布局比较简单，直接选用默认即可。<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3>菜单栏中就是一个个类似于按钮的东西的陈列，给每个物件添加监听器和监听事件就能实现相应功能，相应功能相当于已经封装好了。<br>此处查找和替换稍微有点不同，需要再创建两个新类，然后在相应的监听器事件中实例化。<h3 id="维护内容"><a href="#维护内容" class="headerlink" title="维护内容"></a>维护内容</h3>为了使程序使用起来更贴心，需要随时维护内容是否保存。<h2 id="代码细节"><a href="#代码细节" class="headerlink" title="代码细节"></a>代码细节</h2>好心的助教哥哥已经写好了大概模板，我只需要按照相应的功能改写就好了。<h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3>创建JMenu对象，然后加入JMenu就是菜单栏上显示的，再在每个JMenu中加入JMenuItem就是每一项功能。</li></ul><pre><code>        JMenuBar menuBar = new JMenuBar();        JMenu fileMenu = new JMenu(&quot;File&quot;);        menuBar.add(fileMenu);        JMenuItem newfile = new JMenuItem(&quot;new&quot;);        fileMenu.add(newfile);        setJMenuBar(menuBar);</code></pre><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>像什么new close exit比较简单就不再赘述。<br>余下分为两类一类与文件相关一类与系统剪切板互动。</p><h4 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h4><p>open其实就是从一个txt文件读取内容然后显示在文字框内，我查阅资料选择Scanner类来完成。其实这里有一些些小问题，不能很好的读取空格和回车的内容，但是我也不想管了。save saveas类似，助教已经给了PrintWriter类的参考，我照着就完成了。注意第一次打开的文件save和saveas其实是一样的功能。</p><pre><code>        newfile.addActionListener(new ActionListener() &#123;            public void actionPerformed (ActionEvent e) &#123;                if (!saved||isChanged()) &#123;                    int option = JOptionPane.showConfirmDialog(newfile, &quot;create new file without save?&quot;,&quot;warning&quot;,JOptionPane.OK_CANCEL_OPTION);                if (option != JOptionPane.YES_OPTION)                    return;                &#125;                textPane.setText(&quot;&quot;);                filePath = &quot;&quot;;                content = &quot;&quot;;                saved = false;            &#125;        openfile.addActionListener(new ActionListener() &#123;            public void actionPerformed (ActionEvent e) &#123;                JFileChooser fileChooser = new JFileChooser();                fileChooser.showDialog(openfile, &quot;open&quot;);                File file = fileChooser.getSelectedFile();                nowFile = file;                String newfilePath = file.getPath();                file = new File(newfilePath);                try &#123;                    String s=&quot;&quot;;                    Scanner in = new Scanner(file);                    while(in.hasNext()) &#123;                        s += in.next();                        s += &quot; &quot;;                    &#125;                                            textPane.setText(s);                    filePath = newfilePath;                    in.close();                &#125;catch (FileNotFoundException e2) &#123;                    return;                &#125;                saved = false;                content = textPane.getText();            &#125;        &#125;);        savefile.addActionListener(new ActionListener() &#123;            public void actionPerformed (ActionEvent e) &#123;                if (filePath==&quot;&quot;) &#123;                    JFileChooser fileChooser = new JFileChooser();                    fileChooser.showDialog(saveasfile, &quot;save&quot;);                    File file = fileChooser.getSelectedFile();                    String newfilePath = file.getPath();                    file = new File(newfilePath);                    nowFile = file;                    try &#123;                        PrintWriter writer = new PrintWriter(file);                        writer.write(textPane.getText());                        writer.close();                        filePath = newfilePath;                    &#125;catch (FileNotFoundException e2) &#123;                        return;                    &#125;                    saved = true;                    content = textPane.getText();                &#125;                else &#123;                    try &#123;                        PrintWriter writer = new PrintWriter(nowFile);                        writer.write(textPane.getText());                        writer.close();                        filePath = nowFile.getPath();                        JOptionPane.showMessageDialog(savefile, &quot;保存成功&quot;,&quot;提示&quot;,JOptionPane.OK_CANCEL_OPTION);                    &#125;catch (FileNotFoundException e2) &#123;                        return;                    &#125;                    saved = true;                    content = textPane.getText();                &#125;            &#125;        &#125;);        saveasfile.addActionListener(new ActionListener() &#123;            public void actionPerformed (ActionEvent e) &#123;                JFileChooser fileChooser = new JFileChooser();                fileChooser.showDialog(saveasfile, &quot;save&quot;);                File file = fileChooser.getSelectedFile();                String newfilePath = file.getPath();                file = new File(newfilePath);                try &#123;                    PrintWriter writer = new PrintWriter(file);                    writer.write(textPane.getText());                    writer.close();                    filePath = newfilePath;                &#125;catch (FileNotFoundException e2) &#123;                    return;                &#125;                saved = true;                content = textPane.getText();            &#125;        &#125;);        closefile.addActionListener(new ActionListener() &#123;            public void actionPerformed (ActionEvent e) &#123;                textPane.setText(&quot;&quot;);                saved = false;                content = textPane.getText();                filePath = &quot;&quot;;                nowFile = null;            &#125;        &#125;);        exitfile.addActionListener(new ActionListener() &#123;            public void actionPerformed (ActionEvent e) &#123;                System.exit(0);            &#125;        &#125;);</code></pre><h4 id="剪切板互动"><a href="#剪切板互动" class="headerlink" title="剪切板互动"></a>剪切板互动</h4><p>复制粘贴区别仅仅在于是否改变文本框内的内容。使用Clipboard就能很好的完成。</p><pre><code>        copyfile.addActionListener(new ActionListener() &#123;            public void actionPerformed (ActionEvent e) &#123;                int start = textPane.getSelectionStart();                int end = textPane.getSelectionEnd();                if (start == end)                    return;                content = textPane.getText();                String cutString = content.substring(start,end);                textPane.setCaretPosition(start);                saved = false;                Transferable transferable = new StringSelection(cutString);                Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();                clip.setContents(transferable,null);            &#125;        &#125;);        cutfile.addActionListener(new ActionListener() &#123;            public void actionPerformed (ActionEvent e) &#123;                int start = textPane.getSelectionStart();                int end = textPane.getSelectionEnd();                if (start == end)                    return;                content = textPane.getText();                String cutString = content.substring(start,end);                textPane.setText(content.substring(0,start)+content.substring(end));                textPane.setCaretPosition(start);                saved = false;                Transferable transferable = new StringSelection(cutString);                Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();                clip.setContents(transferable,null);            &#125;        &#125;);        pastefile.addActionListener(new ActionListener() &#123;            public void actionPerformed (ActionEvent e) &#123;                                    String ret = &quot;&quot;;                Clipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();                // 获取剪切板中的内容                Transferable clipTf = sysClip.getContents(null);                if (clipTf != null) &#123;                    // 检查内容是否是文本类型                    if (clipTf.isDataFlavorSupported(DataFlavor.stringFlavor)) &#123;                        try &#123;                            ret = (String) clipTf                                    .getTransferData(DataFlavor.stringFlavor);                        &#125; catch (Exception e2) &#123;                            e2.printStackTrace();                        &#125;                    &#125;                &#125;                saved = false;                int a = textPane.getCaretPosition();                textPane.setText(textPane.getText().substring(0,a)+ret+textPane.getText().substring(a));                textPane.setCaretPosition(a+ret.length());            &#125;        &#125;);        findfile.addActionListener(new ActionListener() &#123;            public void actionPerformed (ActionEvent e) &#123;                new FindFrame();            &#125;        &#125;);        replacefile.addActionListener(new ActionListener() &#123;            public void actionPerformed (ActionEvent e) &#123;                new ReplaceFrame();            &#125;        &#125;);</code></pre><h3 id="新窗口功能"><a href="#新窗口功能" class="headerlink" title="新窗口功能"></a>新窗口功能</h3><p>find和replace大同小异，都是创建新类继承JFrame，然后各种用一个函数实现自己功能。我选用FlowLayout布局。find内部功能主要靠indexOf获得目标字符串在内容中的位置然后调整光标选中区域即可。replace就更简单，replaceAll，耗子尾汁。</p><pre><code>        button1.addActionListener(new ActionListener() &#123;            public void actionPerformed (ActionEvent e) &#123;                key = text.getText();                int pos = 0;                pos = Menuclass.textPane.getSelectionStart()==Menuclass.textPane.getSelectionEnd()?Menuclass.textPane.getSelectionStart():Menuclass.textPane.getSelectionStart()+1;                if (key==null || &quot;&quot;.equals(key)) &#123;                    return;                &#125;                String content1 = Menuclass.textPane.getText();                int resultPos = content1.indexOf(key,pos);                if (-1== resultPos&amp;&amp;pos-key.length()&gt;=0)                    resultPos = content1.substring(0,pos-key.length()).indexOf(key);                if (-1 != resultPos) &#123;                    Menuclass.textPane.setSelectionStart(resultPos);                    Menuclass.textPane.setSelectionEnd(resultPos+key.length());                &#125;                else &#123;                    JOptionPane.showMessageDialog(button1, &quot;找不到该字符串&quot;,&quot;警告&quot;,JOptionPane.OK_CANCEL_OPTION);                &#125;            &#125;        public void actionPerformed (ActionEvent e) &#123;            key1 = oldtext.getText();            key2 = newtext.getText();            String content1 = Menuclass.textPane.getText();            if (key1==null || &quot;&quot;.equals(key1)) &#123;                return;            &#125;            if (key2==null || &quot;&quot;.equals(key2)) &#123;                return;            &#125;                                            Menuclass.textPane.setText(content1.replaceAll(key1, key2));        &#125;</code></pre><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>虽然这个项目比较简单，但奈何我太菜，依旧用了大概五六个小时，毕竟刚开始对GUI确实比较陌生。经过这次实验，我感觉收获良多。</p>]]></content:encoded>
      
      
      <category domain="https://sunnysugar.fun/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/">计算机</category>
      
      <category domain="https://sunnysugar.fun/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/JAVA%E5%AE%9E%E9%AA%8C/">JAVA实验</category>
      
      
      <category domain="https://sunnysugar.fun/tags/JAVA/">JAVA</category>
      
      
      <comments>https://sunnysugar.fun/2020/11/24/java%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
